Distributed Lab#2
MazeWar Implementation Plan:
The plan is to use one of the clients as a server.
If started with a single parameter port#, client listens for incomming connections and spawns new theads to handle requests. The map and queue of events is held in the main thread which is the local client. 
Cases:
- If we get a new incomming connection, we need to:
	1. Add "initialize the client" to the queue (initialize by placing it at a random location on the map). If we are to broadcast the map right after 		this we do not need to broadcast this action itself.
	2.  Then we add "send the full map" action to the broadcast queue. Once the time comes, the map is saved and broadcasted to all the clients.
(CAN we combine this two actions into an atomic command?)
- If we get an instruction from a known remote client, we simply add it to the queue... Queue can be a hashmap, where we add actions indexed by time of the arrival. To retrive them we can simply get indices and sort them, then send out and remove. To be frank - possibility of TCP loosing and retransmitting packet is quite low on modern networks, thus we can assume that arrival-time is accurate index of order.


On the other hand if client is started with combination of "host" and "port" parameters, it shall connect to the server and pass all the actions to the server. Upon recieving the instruction from server, client shall queue it and then execute.

On the client side we will do following:
1. Client's keyListen will only send respective "event" to the server with the name of the client. NOTE: have to check for names to be unique... or perhaps can make them unique by appending some value.
2. The mazeImpl will listen to the incomming events from server (should probably spawn a thread). It reads the name and executes respective event on that client (eg. client2.forward()). It will also have to execute events such as:
	a) generate map for given seed;
	b) add remote client when "client joins" event is received;
	c) we can broadcast client join event and then have to make sure we do not add localClient as remote on the client side. Or we can 		send joins to everybody except the client who joined.

Another concern:
- It seems we do not need to resync any pseudo-random info (eg. location of reborn player) as long as all users start with the same seed and 	make the same number of calls to the generator.
